!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Book_Server	include/server.hpp	/^class Book_Server : public QObject$/;"	c
Book_Server	src/server.cpp	/^Book_Server::Book_Server(QObject *parent):QObject(parent),price_per_hour_(10000),state_(Ready),reciever(nullptr),started(false),$/;"	f	class:Book_Server
ConState	include/server.hpp	/^    enum ConState {$/;"	g	class:Book_Server
PosSource	include/server.hpp	/^    QGeoPositionInfoSource *PosSource;$/;"	m	class:Book_Server
Publishing	include/server.hpp	/^        Publishing = 0,$/;"	e	enum:Book_Server::ConState
Ready	include/server.hpp	/^        Ready$/;"	e	enum:Book_Server::ConState
books_	include/server.hpp	/^    std::set<Booking> books_;$/;"	m	class:Book_Server
checkFunds	src/server.cpp	/^void Book_Server::checkFunds(std::vector<qiota::Node_output>  outs)$/;"	f	class:Book_Server
checkLPermission	src/server.cpp	/^void Book_Server::checkLPermission(void)$/;"	f	class:Book_Server
check_nft_to_open	src/server.cpp	/^void Book_Server::check_nft_to_open(Node_output node_out)$/;"	f	class:Book_Server
check_state_output	src/server.cpp	/^void Book_Server::check_state_output(const std::vector<Node_output> node_output_s)$/;"	f	class:Book_Server
clean_state	src/server.cpp	/^void Book_Server::clean_state(void)$/;"	f	class:Book_Server
deserialize_state	src/server.cpp	/^void Book_Server::deserialize_state(const QByteArray &state)$/;"	f	class:Book_Server
funds	include/server.hpp	/^    QJsonObject funds(void)const{return funds_json;}$/;"	f	class:Book_Server
funds_	include/server.hpp	/^    quint64 funds_;$/;"	m	class:Book_Server
funds_json	include/server.hpp	/^    QJsonObject funds_json,minfunds_json;$/;"	m	class:Book_Server
get_publish_output	src/server.cpp	/^std::shared_ptr<qblocks::Output> Book_Server::get_publish_output(const quint64 &amount)const$/;"	f	class:Book_Server
get_restart_state	src/server.cpp	/^void Book_Server::get_restart_state(void)$/;"	f	class:Book_Server
handle_init_funds	src/server.cpp	/^void Book_Server::handle_init_funds()$/;"	f	class:Book_Server
handle_new_book	src/server.cpp	/^void Book_Server::handle_new_book(Node_output node_out)$/;"	f	class:Book_Server
init	src/server.cpp	/^void Book_Server::init()$/;"	f	class:Book_Server
initGPS	src/server.cpp	/^void Book_Server::initGPS(void)$/;"	f	class:Book_Server
is_open	include/server.hpp	/^    bool is_open()const{return open;}$/;"	f	class:Book_Server
m_GeoCoord	include/server.hpp	/^    QGeoCoordinate m_GeoCoord;$/;"	m	class:Book_Server
m_rpi_server	include/server.hpp	/^    bool m_rpi_server;$/;"	m	class:Book_Server
main	main.cpp	/^int main(int argc, char *argv[])$/;"	f
minfunds	include/server.hpp	/^    QJsonObject minfunds(void)const{return minfunds_json;}$/;"	f	class:Book_Server
minfunds_json	include/server.hpp	/^    QJsonObject funds_json,minfunds_json;$/;"	m	class:Book_Server
open	include/server.hpp	/^    bool open,started;$/;"	m	class:Book_Server
open_rpi_box	src/server.cpp	/^void Book_Server::open_rpi_box(void)$/;"	f	class:Book_Server
payments	include/server.hpp	/^    auto payments(void)const{return payments_;}$/;"	f	class:Book_Server
payments_	include/server.hpp	/^    QJsonArray payments_;$/;"	m	class:Book_Server
price_per_hour_	include/server.hpp	/^    quint64 price_per_hour_;$/;"	m	class:Book_Server
queue	include/server.hpp	/^    std::queue<Node_output> queue;$/;"	m	class:Book_Server
reciever	include/server.hpp	/^    QObject* reciever;$/;"	m	class:Book_Server
restart	src/server.cpp	/^void Book_Server::restart(void)$/;"	f	class:Book_Server
serialize_state	src/server.cpp	/^QByteArray Book_Server::serialize_state(void)const$/;"	f	class:Book_Server
serverId	include/server.hpp	/^    QString serverId(void)const{return serverId_;}$/;"	f	class:Book_Server
serverId_	include/server.hpp	/^    QString serverId_;$/;"	m	class:Book_Server
setFunds	src/server.cpp	/^void Book_Server::setFunds(quint64 funds_m){$/;"	f	class:Book_Server
setOpen	include/server.hpp	/^    void setOpen(bool op){if(op!=open){open=op;emit openChanged();}}$/;"	f	class:Book_Server
setServerId	include/server.hpp	/^    void setServerId(QString ser){if(ser!=serverId_){serverId_=ser;emit serverIdChanged();}}$/;"	f	class:Book_Server
set_state	include/server.hpp	/^    void set_state(ConState state_m){if(state_m!=state_){state_=state_m;emit stateChanged(); }}$/;"	f	class:Book_Server
setminFunds	src/server.cpp	/^void Book_Server::setminFunds(quint64 funds_m){$/;"	f	class:Book_Server
started	include/server.hpp	/^    bool open,started;$/;"	m	class:Book_Server
state	include/server.hpp	/^    ConState state(void)const{return state_;}$/;"	f	class:Book_Server
state_	include/server.hpp	/^    ConState state_;$/;"	m	class:Book_Server
total_funds	include/server.hpp	/^    QHash<QString,quint64> total_funds;$/;"	m	class:Book_Server
try_to_open	src/server.cpp	/^void Book_Server::try_to_open(void)$/;"	f	class:Book_Server
